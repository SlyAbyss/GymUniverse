// <auto-generated />
using System;
using GymUniverse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymUniverse.Data.Migrations
{
    [DbContext(typeof(GymUniverseDbContext))]
    [Migration("20241211201018_TrainerSeeds")]
    partial class TrainerSeeds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymUniverse.Models.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("GymUniverse.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("Schedule")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GymUniverse.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("GymUniverse.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "371 Metal Street, Muscle City",
                            Description = "A premier gym with top-of-the-line equipment for bodybuilders and athletes. Offering personal training and nutrition counseling.",
                            ImageUrl = "/images/HeavyMetalFitness.png",
                            Name = "Heavy Metal Fitness"
                        },
                        new
                        {
                            Id = 2,
                            Address = "968 Fitness Blvd, Healthtown",
                            Description = "Fusion of fitness and fun! Join group classes, enjoy strength training, and explore our yoga and cardio sessions.",
                            ImageUrl = "/images/FitFusion.png",
                            Name = "FitFusion"
                        },
                        new
                        {
                            Id = 3,
                            Address = "137 Summit Drive, Peak Valley",
                            Description = "A luxurious gym offering top-notch services with an exclusive members-only fitness experience. From cardio to weight training, we have it all.",
                            ImageUrl = "/images/ThePeakFitnessCenter.png",
                            Name = "The Peak Fitness Center"
                        },
                        new
                        {
                            Id = 4,
                            Address = "119 Beachfront Ave, Sunny Bay",
                            Description = "Work out by the beach! Enjoy outdoor workouts with a view of the ocean. Perfect for yoga, pilates, and beach-inspired fitness.",
                            ImageUrl = "/images/SouthBeachFitness.png",
                            Name = "South Beach Fitness"
                        },
                        new
                        {
                            Id = 5,
                            Address = "247 Street Way, City Centre",
                            Description = "Modern gym with a focus on functional training, cross-fit, and cardio. Open 24/7 to cater to your busy urban lifestyle.",
                            ImageUrl = "/images/UrbanFitGym.png",
                            Name = "Urban Fit Gym"
                        },
                        new
                        {
                            Id = 6,
                            Address = "727 Wellness Lane, Tranquil Park",
                            Description = "Find your balance at ZenFit! We offer a range of holistic fitness programs including yoga, pilates, and meditation, along with strength training.",
                            ImageUrl = "/images/ZenFitWellness.png",
                            Name = "ZenFit Wellness"
                        });
                });

            modelBuilder.Entity("GymUniverse.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A room designed for weightlifting and powerlifting, equipped with squat racks, benches, and Olympic bars.",
                            ImageUrl = "/images/HeavyLiftingZone.png",
                            LocationId = 1,
                            Name = "Heavy Lifting Zone"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Focus on resistance training with dumbbells, kettlebells, and cable machines.",
                            ImageUrl = "/images/StrengthTrainingHub.png",
                            LocationId = 1,
                            Name = "Strength Training Hub"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A vibrant studio for Zumba classes, complete with a sound system and energetic walls.",
                            ImageUrl = "/images/ZumbaStudio.png",
                            LocationId = 2,
                            Name = "Zumba Studio"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Designed for High-Intensity Interval Training, equipped with battle ropes, boxes, and medicine balls.",
                            ImageUrl = "/images/HIITTrainingArena.png",
                            LocationId = 2,
                            Name = "HIIT Training Arena"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A dedicated area for spinning classes with stationary bikes and motivational lighting.",
                            ImageUrl = "/images/SpinStudio.png",
                            LocationId = 2,
                            Name = "Spin Studio"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A luxurious space with treadmills, elliptical machines, and stationary bikes, offering a view of the city skyline.",
                            ImageUrl = "/images/CardioDeck.png",
                            LocationId = 3,
                            Name = "Cardio Deck"
                        },
                        new
                        {
                            Id = 7,
                            Description = "An exclusive room for one-on-one personal training sessions, equipped with versatile fitness equipment.",
                            ImageUrl = "/images/PrivateTrainingSuite.png",
                            LocationId = 3,
                            Name = "Private Training Suite"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A serene room for yoga and meditation with large windows showcasing the beach view.",
                            ImageUrl = "/images/BeachfrontYogaSpace.png",
                            LocationId = 4,
                            Name = "Beachfront Yoga Space"
                        },
                        new
                        {
                            Id = 9,
                            Description = "An outdoor area designed for functional fitness training with fresh air and ocean breeze.",
                            ImageUrl = "/images/OutdoorTrainingZone.png",
                            LocationId = 4,
                            Name = "Outdoor Training Zone"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A dynamic area for cross-fit and functional workouts, including TRX, kettlebells, and climbing ropes.",
                            ImageUrl = "/images/FunctionalTrainingSpace.png",
                            LocationId = 5,
                            Name = "Functional Training Space"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A space for cardio workouts with treadmills, bikes, and rowing machines in an urban-inspired setting.",
                            ImageUrl = "/images/CardioStudio.png",
                            LocationId = 5,
                            Name = "Cardio Studio"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A tranquil space for guided meditation and mindfulness practice, with ambient lighting and relaxing music.",
                            ImageUrl = "/images/MeditationRoom.png",
                            LocationId = 6,
                            Name = "Meditation Room"
                        },
                        new
                        {
                            Id = 13,
                            Description = "A room for pilates sessions, equipped with reformers, mats, and resistance bands.",
                            ImageUrl = "/images/PilatesStudio.png",
                            LocationId = 6,
                            Name = "Pilates Studio"
                        },
                        new
                        {
                            Id = 14,
                            Description = "A space dedicated to improving balance and core strength, featuring BOSU balls, balance boards, and stability equipment.",
                            ImageUrl = "/images/BalanceandCoreZone.png",
                            LocationId = 6,
                            Name = "Balance and Core Zone"
                        });
                });

            modelBuilder.Entity("GymUniverse.Models.RoomEquipment", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("RoomsEquipments");
                });

            modelBuilder.Entity("GymUniverse.Models.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 35,
                            Bio = "Certified weightlifting coach specializing in strength training and powerlifting techniques.",
                            ImageUrl = "/images/JakePower.png",
                            LocationId = 1,
                            Name = "Jake Power"
                        },
                        new
                        {
                            Id = 2,
                            Age = 34,
                            Bio = "A seasoned weightlifting coach with a passion for cosmic-level strength and power.",
                            ImageUrl = "/images/AlexSteele.png",
                            LocationId = 1,
                            Name = "Alex Steele"
                        },
                        new
                        {
                            Id = 3,
                            Age = 29,
                            Bio = "Specializes in strength training and personalized fitness plans, inspired by planetary forces.",
                            ImageUrl = "/images/TinaLee.png",
                            LocationId = 1,
                            Name = "Tina Lee"
                        },
                        new
                        {
                            Id = 4,
                            Age = 30,
                            Bio = "Cardio fitness expert with innovative techniques for endurance and speed.",
                            ImageUrl = "/images/RyanVega.png",
                            LocationId = 2,
                            Name = "Ryan Vega"
                        },
                        new
                        {
                            Id = 5,
                            Age = 25,
                            Bio = "Energetic instructor focusing on high-intensity interval training.",
                            ImageUrl = "/images/SophiaMyers.png",
                            LocationId = 2,
                            Name = "Sophia Myers"
                        },
                        new
                        {
                            Id = 6,
                            Age = 28,
                            Bio = "Endurance athlete and expert in treadmill and bike-based cardio programs.",
                            ImageUrl = "/images/LiamSpeed.png",
                            LocationId = 3,
                            Name = "Liam Speed"
                        },
                        new
                        {
                            Id = 7,
                            Age = 40,
                            Bio = "Functional training specialist helping clients achieve balance and strength.",
                            ImageUrl = "/images/VictorKane.png",
                            LocationId = 3,
                            Name = "Victor Kane"
                        },
                        new
                        {
                            Id = 8,
                            Age = 28,
                            Bio = "Creative trainer focusing on dynamic functional workouts.",
                            ImageUrl = "/images/ZaraQuinn.png",
                            LocationId = 3,
                            Name = "Zara Quinn"
                        },
                        new
                        {
                            Id = 9,
                            Age = 32,
                            Bio = "Certified yoga instructor with a focus on mindfulness and inner peace.",
                            ImageUrl = "/images/EvelynHart.png",
                            LocationId = 4,
                            Name = "Evelyn Hart"
                        },
                        new
                        {
                            Id = 10,
                            Age = 35,
                            Bio = "Expert in yoga and wellness, dedicated to holistic health.",
                            ImageUrl = "/images/SamuelBrooks.png",
                            LocationId = 4,
                            Name = "Samuel Brooks"
                        },
                        new
                        {
                            Id = 11,
                            Age = 30,
                            Bio = "Multi-sport coach specializing in agility and competitive training.",
                            ImageUrl = "/images/KaraHayes.png",
                            LocationId = 5,
                            Name = "Kara Hayes"
                        },
                        new
                        {
                            Id = 12,
                            Age = 33,
                            Bio = "Performance coach dedicated to team dynamics and sports excellence.",
                            ImageUrl = "/images/NathanReed.png",
                            LocationId = 5,
                            Name = "Nathan Reed"
                        },
                        new
                        {
                            Id = 13,
                            Age = 27,
                            Bio = "Wellness coach focusing on restorative practices and meditation.",
                            ImageUrl = "/images/IsabellaBennett.png",
                            LocationId = 6,
                            Name = "Isabella Bennett"
                        },
                        new
                        {
                            Id = 14,
                            Age = 38,
                            Bio = "Experienced trainer integrating mindfulness into fitness routines.",
                            ImageUrl = "/images/ElijahColeman.png",
                            LocationId = 6,
                            Name = "Elijah Coleman"
                        });
                });

            modelBuilder.Entity("GymUniverse.Models.UserCourse", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("UsersCourses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Administrator",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "User",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b04c7301-c0c6-4a05-a8ba-8bec078cb212",
                            RoleId = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymUniverse.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "b04c7301-c0c6-4a05-a8ba-8bec078cb212",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b390fd3-38de-4414-97a1-726375388804",
                            Email = "gymadmin@gymuniverse.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GYMADMIN@GYMUNIVERSE.COM",
                            NormalizedUserName = "GYMADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVBAg5oK9M6ROnNsm0tplxEXWo8gTyQxeGv0NEHYChm45tXGjCIw+/jLWJpp4Cnqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SecurityStampTest01",
                            TwoFactorEnabled = false,
                            UserName = "gymadmin"
                        });
                });

            modelBuilder.Entity("GymUniverse.Models.Course", b =>
                {
                    b.HasOne("GymUniverse.Models.Trainer", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymUniverse.Models.Room", b =>
                {
                    b.HasOne("GymUniverse.Models.Location", "Location")
                        .WithMany("Rooms")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("GymUniverse.Models.RoomEquipment", b =>
                {
                    b.HasOne("GymUniverse.Models.Equipment", "Equipment")
                        .WithMany("RoomEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymUniverse.Models.Room", "Room")
                        .WithMany("RoomsEquipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("GymUniverse.Models.Trainer", b =>
                {
                    b.HasOne("GymUniverse.Models.Location", "Location")
                        .WithMany("Trainers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("GymUniverse.Models.UserCourse", b =>
                {
                    b.HasOne("GymUniverse.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymUniverse.Models.ApplicationUser", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymUniverse.Models.Course", b =>
                {
                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("GymUniverse.Models.Equipment", b =>
                {
                    b.Navigation("RoomEquipments");
                });

            modelBuilder.Entity("GymUniverse.Models.Location", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("GymUniverse.Models.Room", b =>
                {
                    b.Navigation("RoomsEquipments");
                });

            modelBuilder.Entity("GymUniverse.Models.Trainer", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("GymUniverse.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
